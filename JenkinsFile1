node('dev') {
  // Working enviornment specific variables
  def wsDirPath = this.env.getProperty('WORKSPACE')
  // Tools specific variables
  def maven_home = tool(name:"Maven")
  
  try {
    stage("dummy: gathering info") {
      echo "User details: "
      sh "id"
      echo "Build number: "
      echo "${this.currentBuild.getNumber()}"
      echo "Name of the node: "
      echo "${this.env.getProperty('NODE_NAME')}"
      echo "Workspace directory path :"
      echo "${wsDirPath}"
      echo "Maven version: "
      sh "${maven_home}/bin/mvn -version"
      echo "Java version: "
      sh "java -version"
    }
    stage("fetching the source code") {
      echo "cloning the source code from github"
      // checkout scmGit(branches: [[name: 'branch1']], userRemoteConfigs: [[credentialsId: 'a27afd60-ba78-46fe-8603-8566ba9151e6', url: 'git@github.com:project-simlple/Demo.git']])
      checkout scmGit(branches: [[name: 'Simplelearn']], userRemoteConfigs: [[url: 'https://github.com/project-simlple/java-code1.git']])
      echo "listing workspace directory"
      sh "ls -alh ${wsDirPath}"
    }
    stage("build the .war file using maven") {
      sh "cd ${wsDirPath}"
      sh "${maven_home}/bin/mvn package"
    }
    stage("copy the .war file to tomcat webapps directory for deployment and clean the build artificats from workspace") {
      echo "listing target directory"
      sh "ls -alh ${wsDirPath}/target"
      sh "ls ${wsDirPath}/target|grep .war" 
    }
    
    cleanWs(cleanWhenSuccess: true,
            cleanWhenAborted: false,
            cleanWhenFailure: false,
            cleanWhenNotBuilt: false
            )  
    
  } catch(Exception e) {
    println e
    
  } finally {
    
  }
  
}
